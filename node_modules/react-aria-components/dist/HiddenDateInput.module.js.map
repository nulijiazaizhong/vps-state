{"mappings":";;;;AAAA;;;;;;;;;;CAUC;;;AAiCD,MAAM,qCAAe;IAAC;IAAO;IAAS;CAAO;AAC7C,MAAM,uCAAiB;IAAC,QAAQ;IAAG,UAAU;IAAG,UAAU;AAAC;AAEpD,SAAS,0CAAmB,KAA2B,EAAE,KAAuC;IACrG,IAAI,gBACF,YAAY,cACZ,UAAU,QACV,IAAI,EACL,GAAG;IACJ,IAAI,uBAAC,mBAAmB,EAAC,GAAG,CAAA,GAAA,wBAAgB,EAAE;QAC5C,OAAO;YACL,0BAA0B;YAC1B,UAAU;YACV,KAAK;YACL,MAAM;QACR;IACF;IAEA,IAAI,YAAY;IAChB,IAAI,MAAM,WAAW,KAAK,UACxB,YAAY;SACP,IAAI,MAAM,WAAW,KAAK,QAC/B,YAAY;IAGd,IAAI,YAAY,MAAM,KAAK,IAAI,OAAO,KAAK,MAAM,KAAK,CAAC,QAAQ;IAE/D,IAAI,YAAY,MAAM,WAAW,KAAK,QAAQ,SAAS;IAEvD,IAAI,eAAe;QAAC;QAAQ;QAAU;KAAS;IAC/C,+EAA+E;IAC/E,IAAI,MAAM;IACV,IAAI,aAAa,QAAQ,CAAC,MAAM,WAAW,GAAG;QAC5C,MAAM,oCAAc,CAAC,MAAM,WAAW,CAAC;QACvC,eAAe,aAAa,KAAK,CAAC,GAAG;IACvC;IAEA,OAAO;QACL,gBAAgB;YACd,GAAG,mBAAmB;YACtB,eAAe;YACf,aAAa;YACb,CAAC,gCAAgC,EAAE;YACnC,aAAa;YACb,CAAC,mBAAmB,EAAE;QACxB;QACA,YAAY;YACV,UAAU;0BACV;YACA,UAAU;YACV,MAAM;YACN,wGAAwG;YACxG,MAAM;kBACN;YACA,MAAM;YACN,OAAO;YACP,UAAU,CAAC;gBACT,IAAI,eAAe,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;gBAC1C,IAAI,cACF,IAAI;oBACF,IAAI,cAA+C,CAAA,GAAA,oBAAY,EAAE;oBACjE,IAAI,MAAM,WAAW,KAAK,OACxB,cAAc,CAAA,GAAA,gBAAQ,EAAE;oBAE1B,uHAAuH;oBACvH,iHAAiH;oBACjH,qHAAqH;oBACrH,4GAA4G;oBAC5G,yHAAyH;oBACzH,kDAAkD;oBAClD,IAAI,gBAAgB,OAClB,IAAK,IAAI,QAAQ,YAAa;wBAC5B,IAAI,mCAAa,QAAQ,CAAC,OACxB,MAAM,UAAU,CAAC,MAAyB,WAAW,CAAC,KAAK;wBAE7D,IAAI,aAAa,QAAQ,CAAC,OACxB,MAAM,UAAU,CAAC,MAAyB,WAAW,CAAC,KAAK;oBAE/D;oBAEF,MAAM,QAAQ,CAAC;gBACjB,EAAE,OAAM;gBACN,SAAS;gBACX;YAEJ;QACF;IACF;AACF;AAEO,SAAS,0CAAgB,KAA2B;IACzD,IAAI,SAAC,KAAK,EAAC,GAAG;IACd,IAAI,kBAAC,cAAc,cAAE,UAAU,EAAC,GAAG,0CAAmB;QAAC,GAAG,KAAK;IAAA,GAAG;IAClE,qBACE,gCAAC;QAAK,GAAG,cAAc;QAAE,eAAY;qBACnC,gCAAC,SAAU;AAGjB","sources":["packages/react-aria-components/src/HiddenDateInput.tsx"],"sourcesContent":["/*\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nimport {CalendarDate, CalendarDateTime, parseDate, parseDateTime} from '@internationalized/date';\nimport {DateFieldState, DatePickerState, DateSegmentType} from 'react-stately';\nimport React, {ReactNode} from 'react';\nimport {useVisuallyHidden} from 'react-aria';\n\ninterface AriaHiddenDateInputProps {\n  /**\n   * Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).\n   */\n  autoComplete?: string,\n  /** HTML form input name. */\n  name?: string,\n  /** Sets the disabled state of the input. */\n  isDisabled?: boolean\n}\n\ninterface HiddenDateInputProps extends AriaHiddenDateInputProps {\n  /**\n   * State for the input.\n   */\n  state: DateFieldState | DatePickerState\n}\n\nexport interface HiddenDateAria {\n  /** Props for the container element. */\n  containerProps: React.HTMLAttributes<HTMLDivElement>,\n  /** Props for the hidden input element. */\n  inputProps: React.InputHTMLAttributes<HTMLInputElement>\n}\n\nconst dateSegments = ['day', 'month', 'year'];\nconst granularityMap = {'hour': 1, 'minute': 2, 'second': 3};\n\nexport function useHiddenDateInput(props: HiddenDateInputProps, state: DateFieldState | DatePickerState) : HiddenDateAria {\n  let {\n    autoComplete,\n    isDisabled,\n    name\n  } = props;\n  let {visuallyHiddenProps} = useVisuallyHidden({\n    style: {\n      // Prevent page scrolling.\n      position: 'fixed',\n      top: 0,\n      left: 0\n    }\n  });\n\n  let inputStep = 60;\n  if (state.granularity === 'second') {\n    inputStep = 1;\n  } else if (state.granularity === 'hour') {\n    inputStep = 3600; \n  }\n\n  let dateValue = state.value == null ? '' : state.value.toString();\n\n  let inputType = state.granularity === 'day' ? 'date' : 'datetime-local';\n\n  let timeSegments = ['hour', 'minute', 'second'];\n  // Depending on the granularity, we only want to validate certain time segments\n  let end = 0;\n  if (timeSegments.includes(state.granularity)) {\n    end = granularityMap[state.granularity];\n    timeSegments = timeSegments.slice(0, end);\n  }\n\n  return {\n    containerProps: {\n      ...visuallyHiddenProps,\n      'aria-hidden': true,\n      // @ts-ignore\n      ['data-react-aria-prevent-focus']: true,\n      // @ts-ignore\n      ['data-a11y-ignore']: 'aria-hidden-focus'\n    },\n    inputProps: {\n      tabIndex: -1,\n      autoComplete,\n      disabled: isDisabled,\n      type: inputType,\n      // We set the form prop to an empty string to prevent the hidden date input's value from being submitted\n      form: '',\n      name,\n      step: inputStep,\n      value: dateValue,\n      onChange: (e) => {\n        let targetString = e.target.value.toString();\n        if (targetString) {\n          try {\n            let targetValue: CalendarDateTime | CalendarDate = parseDateTime(targetString);\n            if (state.granularity === 'day') {\n              targetValue = parseDate(targetString);\n            }\n            // We check to to see if setSegment exists in the state since it only exists in DateFieldState and not DatePickerState.\n            // The setValue method has different behavior depending on if it's coming from DateFieldState or DatePickerState.\n            // In DateFieldState, setValue firsts checks to make sure that each segment is filled before committing the newValue \n            // which is why in the code below we first set each segment to validate it before committing the new value. \n            // However, in DatePickerState, since we have to be able to commit values from the Calendar popover, we are also able to \n            // set a new value when the field itself is empty.\n            if ('setSegment' in state) {\n              for (let type in targetValue) {\n                if (dateSegments.includes(type)) {\n                  state.setSegment(type as DateSegmentType, targetValue[type]);\n                }\n                if (timeSegments.includes(type)) {\n                  state.setSegment(type as DateSegmentType, targetValue[type]);\n                }\n              }\n            }\n            state.setValue(targetValue);\n          } catch {\n            // ignore\n          }\n        }\n      }\n    }\n  };\n}\n\nexport function HiddenDateInput(props: HiddenDateInputProps): ReactNode | null {\n  let {state} = props;\n  let {containerProps, inputProps} = useHiddenDateInput({...props}, state);\n  return (\n    <div {...containerProps} data-testid=\"hidden-dateinput-container\">\n      <input {...inputProps} />\n    </div>\n  );\n}\n"],"names":[],"version":3,"file":"HiddenDateInput.module.js.map"}